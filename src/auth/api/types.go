package api

import (
	"crypto"
	"github.com/docker/spdystream/spdy"
	"k8s.io/client-go/tools/clientcmd/api"
	"time"
)

const (
	// Resource information that are used as encryption key storage. Can be accessible by multiple dashboard replicas.
	EncryptionKeyHolderName = "kubernetes-dashboard-key-holder"

	// Resource information that are used as certificate storage for custom certificates used by the user.
	CertificateHolderSecretName = "kubernetes-dashboard-certs"

	// Expiration time (in seconds) of tokens generated by dashboard. Default: 15 min
	DefaultTokenTTL = 900
)

type AuthenticationModes map[AuthentocationMode]bool

type ProtectedResource struct {

	// ResourceName is a name of thr protected resource
	ResourceName string
	// ResourceNameSpace is a namespace of  the protected  resource
	ResourceNameSpaces string
}

// IsEnabled returns true if given auth mode is supported, false otherwise.
func (self AuthenticationModes) IsEnabled(mode AuthenticationMode) bool {
	_, exists := self[mode]
	return exists
}

// Array returns array of auth modes supported by dashboard.
func (self AuthenticationModes) Array() []AuthenticationMode {
	modes := []AuthenticationMode{}
	for mode := range self {
		modes = append(modes, mode)
	}
	return modes

}

// Add adds given auth mode to AuthenticationModes map
func (self AuthenticationModes) Add(mode AuthenticationMode) {
	self[mode] = true
}

type AuthenticationMode string

func (self AuthenticationMode) String() string {
	return string(self)
}

const (
	Token AuthenticationMode = "token"
	Basic AuthenticationMode = "Basic"
)

type AuthManage interface {
	Login(*LoginSpec) (*AuthResponse, error)

	Refresh(string) (string, error)

	AuthenticationModes() []AuthenticationMode

	AuthenticationSkippable() bool
}

type TokenManage interface {
	Generate(info api.AuthInfo) (string, error)

	Decrypt(string) (*api.AuthInfo, string)

	Refresh(string) (string, error)

	SetTokenTTL(duration time.Duration)
}

type Authenticator interface {
	GetAuthInfo() (api.AuthInfo, error)
}

type LoginSpec struct {
	Username   string `json:"username,omitempty"`
	Password   string `json:",omitempty"`
	Token      string `json:", omitempty"`
	KubeConfig string `json:"kubeconfig,omitempty"`
}

type AuthResponse struct {
	JWEToken string  `json:"jweToken"`
	Errors   []error `json:"errors"`
}

type LoginModesResource struct {
	MOdes []AuthenticationMode `json:"modes"`
}

type LoginSkippableResponse struct {
	Skippable bool `json:"skippable"`
}
